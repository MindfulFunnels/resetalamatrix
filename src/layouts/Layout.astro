---
import "../styles/global.css";
import Navigation from "@/sections/Navigation.astro";
import Footer from "@/sections/Footer.astro";

interface Props {
  title: string;
  isHome?: boolean;
}

const { title, isHome = false } = Astro.props;
---

<!doctype html>
<html lang='es'>
  <head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <title>{title}</title>
    {
      isHome && (
        <>
          <link
            rel='preload'
            as='video'
            href='/videos/tv-turn-on.mp4'
            type='video/mp4'
            fetchpriority='high'
          />
          <link rel='prefetch' href='/videos/tv-turn-on.mp4' />
        </>
      )
    }
  </head>
  <body class='bg-gray-900 min-h-screen w-full'>
    <!-- Video de inicio (solo primera vez) -->
    {
      isHome && (
        <div class='fixed inset-0 z-[100]' id='tv-on-container'>
          <div class='absolute inset-0 bg-gray-900' />
          <video
            class='w-full h-full object-cover'
            autoplay
            muted
            playsinline
            preload='auto'
            controls
            src='/videos/tv-turn-on.mp4'
          />
          <div class='absolute bottom-4 left-4 text-white bg-black/50 px-4 py-2 rounded'>
            Estado del video: <span id='video-status'>Cargando...</span>
          </div>
        </div>
      )
    }

    <!-- Contenido principal (inicialmente oculto) -->
    <div id='main-content' class={isHome ? "opacity-0" : ""}>
      <!-- Navegación siempre visible -->
      <div class='relative z-50'>
        <Navigation />
      </div>
      <slot />
      <div class='relative z-50'>
        <Footer />
      </div>
    </div>
  </body>
</html>

<script>
  // Verificar si es la primera visita
  const hasSeenVideo = localStorage.getItem("hasSeenVideo");
  const tvContainer = document.getElementById("tv-on-container");
  const mainContent = document.getElementById("main-content");
  const videoStatus = document.getElementById("video-status");

  function updateVideoStatus(status) {
    if (videoStatus) {
      videoStatus.textContent = status;
    }
    console.log("Estado del video:", status);
  }

  if (!hasSeenVideo && tvContainer && mainContent) {
    console.log("Primera visita - Mostrando video");
    mainContent.classList.add("opacity-0");

    // Marcar que ya se ha visto el video
    localStorage.setItem("hasSeenVideo", "true");

    // Ocultar el video después de que termine
    const video = tvContainer.querySelector("video");
    if (video) {
      console.log("Video encontrado, configurando eventos");
      updateVideoStatus("Configurando video...");

      video.addEventListener("loadstart", () => {
        updateVideoStatus("Iniciando carga...");
      });

      video.addEventListener("loadeddata", () => {
        updateVideoStatus("Video cargado");
        video
          .play()
          .then(() => {
            updateVideoStatus("Reproduciendo");
            console.log("Video reproduciéndose");
          })
          .catch((error) => {
            updateVideoStatus("Error al reproducir");
            console.error("Error al reproducir el video:", error);
          });
      });

      video.addEventListener("playing", () => {
        updateVideoStatus("Reproduciendo");
      });

      video.addEventListener("ended", () => {
        updateVideoStatus("Terminado");
        console.log("Video terminado");
        tvContainer.style.display = "none";
        mainContent.classList.remove("opacity-0");
      });

      video.addEventListener("error", (e) => {
        updateVideoStatus("Error al cargar");
        console.error("Error al cargar el video:", e);
        tvContainer.style.display = "none";
        mainContent.classList.remove("opacity-0");
      });
    }
  } else if (mainContent) {
    console.log("No es primera visita o no hay contenedor de video");
    mainContent.classList.remove("opacity-0");
    if (tvContainer) {
      tvContainer.style.display = "none";
    }
  }
</script>

<style>
  :root {
    scroll-behavior: smooth;
  }
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }
  .tv-turn-on {
    animation: fadeOut 1s ease-out 2s forwards;
  }
  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
      visibility: hidden;
    }
  }
  #main-content {
    transition: opacity 0.5s ease-in-out;
  }
  #tv-on-container {
    opacity: 1;
    visibility: visible;
  }
</style>
